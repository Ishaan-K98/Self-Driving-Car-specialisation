{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "In this notebook, you will implement the forward longitudinal vehicle model. The model accepts throttle inputs and steps through the longitudinal dynamic equations. Once implemented, you will be given a set of inputs that drives over a small road slope to test your model.\n",
    "\n",
    "The input to the model is a throttle percentage $x_\\theta \\in [0,1]$ which provides torque to the engine and subsequently accelerates the vehicle for forward motion. \n",
    "\n",
    "The dynamic equations consist of many stages to convert throttle inputs to wheel speed (engine -> torque converter -> transmission -> wheel). These stages are bundled together in a single inertia term $J_e$ which is used in the following combined engine dynamic equations.\n",
    "\n",
    "\\begin{align}\n",
    "    J_e \\dot{\\omega}_e &= T_e - (GR)(r_{eff} F_{load}) \\\\ m\\ddot{x} &= F_x - F_{load}\n",
    "\\end{align}\n",
    "\n",
    "Where $T_e$ is the engine torque, $GR$ is the gear ratio, $r_{eff}$ is the effective radius, $m$ is the vehicle mass, $x$ is the vehicle position, $F_x$ is the tire force, and $F_{load}$ is the total load force. \n",
    "\n",
    "The engine torque is computed from the throttle input and the engine angular velocity $\\omega_e$ using a simplified quadratic model. \n",
    "\n",
    "\\begin{align}\n",
    "    T_e = x_{\\theta}(a_0 + a_1 \\omega_e + a_2 \\omega_e^2)\n",
    "\\end{align}\n",
    "\n",
    "The load forces consist of aerodynamic drag $F_{aero}$, rolling friction $R_x$, and gravitational force $F_g$ from an incline at angle $\\alpha$. The aerodynamic drag is a quadratic model and the friction is a linear model.\n",
    "\n",
    "\\begin{align}\n",
    "    F_{load} &= F_{aero} + R_x + F_g \\\\\n",
    "    F_{aero} &= \\frac{1}{2} C_a \\rho A \\dot{x}^2 = c_a \\dot{x}^2\\\\\n",
    "    R_x &= N(\\hat{c}_{r,0} + \\hat{c}_{r,1}|\\dot{x}| + \\hat{c}_{r,2}\\dot{x}^2) \\approx c_{r,1} \\dot{x}\\\\\n",
    "    F_g &= mg\\sin{\\alpha}\n",
    "\\end{align}\n",
    "\n",
    "Note that the absolute value is ignored for friction since the model is used for only forward motion ($\\dot{x} \\ge 0$). \n",
    " \n",
    "The tire force is computed using the engine speed and wheel slip equations.\n",
    "\n",
    "\\begin{align}\n",
    "    \\omega_w &= (GR)\\omega_e \\\\\n",
    "    s &= \\frac{\\omega_w r_e - \\dot{x}}{\\dot{x}}\\\\\n",
    "    F_x &= \\left\\{\\begin{array}{lr}\n",
    "        cs, &  |s| < 1\\\\\n",
    "        F_{max}, & \\text{otherwise}\n",
    "        \\end{array}\\right\\} \n",
    "\\end{align}\n",
    "\n",
    "Where $\\omega_w$ is the wheel angular velocity and $s$ is the slip ratio. \n",
    "\n",
    "We setup the longitudinal model inside a Python class below. The vehicle begins with an initial velocity of 5 m/s and engine speed of 100 rad/s. All the relevant parameters are defined and like the bicycle model, a sampling time of 10ms is used for numerical integration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.image as mpimg\n",
    "\n",
    "class Vehicle():\n",
    "    def __init__(self):\n",
    " \n",
    "        # ==================================\n",
    "        #  Parameters\n",
    "        # ==================================\n",
    "    \n",
    "        #Throttle to engine torque coeffecients in throttle eqation a0, a1, and a2\n",
    "        self.a_0 = 400\n",
    "        self.a_1 = 0.1\n",
    "        self.a_2 = -0.0002\n",
    "        \n",
    "        # Gear ratio, effective radius, mass + inertia\n",
    "        self.GR = 0.35\n",
    "        self.r_e = 0.3\n",
    "        self.J_e = 10\n",
    "        self.m = 2000\n",
    "        self.g = 9.81\n",
    "        \n",
    "        # Aerodynamic and friction coefficients for Faero and Reaction at the tires\n",
    "        self.c_a = 1.36\n",
    "        self.c_r1 = 0.01\n",
    "        \n",
    "        # Tire force \n",
    "        self.c = 10000\n",
    "        self.F_max = 10000\n",
    "        \n",
    "        # State variables\n",
    "        self.x = 0\n",
    "        self.v = 0.001\n",
    "        self.a = 0\n",
    "        self.w_e = 0\n",
    "        self.w_e_dot = 0\n",
    "        \n",
    "        self.sample_time = 0.01\n",
    "        \n",
    "    def reset(self):\n",
    "        # reset state variables\n",
    "        self.x = 0\n",
    "        self.v = 0.0001\n",
    "        self.a = 0\n",
    "        self.w_e = 0\n",
    "        self.w_e_dot = 0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Implement the combined engine dynamic equations along with the force equations in the cell below. The function $\\textit{step}$ takes the throttle $x_\\theta$ and incline angle $\\alpha$ as inputs and performs numerical integration over one timestep to update the state variables. Hint: Integrate to find the current position, velocity, and engine speed first, then propagate those values into the set of equations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Vehicle(Vehicle):\n",
    "    def step(self, throttle, alpha):\n",
    "        # ==================================\n",
    "        #  Implement vehicle model here\n",
    "        # ==================================\n",
    "        \n",
    "        # Computing Torque if engine based on throttle angle \n",
    "        # and W_e that we intitalised at time step 0 to be 100\n",
    "        \n",
    "        T_e = throttle * (self.a_0 + self.a_1*self.w_e + self.a_2*(self.w_e**2))\n",
    "        \n",
    "        \n",
    "        # Computing F_load\n",
    "        \n",
    "        F_aero = self.c_a * self.v**2\n",
    "        R = self.c_r1 * self.v\n",
    "        F_g = self.m * self.g * np.sin(alpha)\n",
    "        \n",
    "        F_load = F_aero + R + F_g\n",
    "        \n",
    "        # W_e_dot for time step that will be used to calculate W_e in the next time step \n",
    "        \n",
    "        self.w_e_dot = (T_e - (self.GR * self.r_e * F_load)) / self.J_e\n",
    "        \n",
    "        \n",
    "        # W_wheel = Gear Ratio * W_engine\n",
    "        w_wheel = self.GR * self.w_e\n",
    "        \n",
    "        slip = ( w_wheel*self.r_e - self.v ) / self.v\n",
    "        \n",
    "        if slip > -1 and slip < 1 :\n",
    "            F_x = self.c * abs(slip)\n",
    "        else:\n",
    "            F_x = self.F_max\n",
    "        \n",
    "        \n",
    "        \n",
    "        self.a = ( F_x - F_load ) / self.m\n",
    "        \n",
    "        \n",
    "        # UPDATING VARIABLES\n",
    "        \n",
    "        self.w_e = self.w_e + (self.w_e_dot * self.sample_time)\n",
    "        self.v = self.v + self.a*self.sample_time\n",
    "        self.x += (self.v * self.sample_time) + 0.5 * self.a * ( self.sample_time**2 )\n",
    "        \n",
    "        \n",
    "        \n",
    "        pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using the model, you can send constant throttle inputs to the vehicle in the cell below. You will observe that the velocity converges to a fixed value based on the throttle input due to the aerodynamic drag and tire force limit. A similar velocity profile can be seen by setting a negative incline angle $\\alpha$. In this case, gravity accelerates the vehicle to a terminal velocity where it is balanced by the drag force."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sample_time = 0.01\n",
    "time_end = 75\n",
    "model = Vehicle()\n",
    "\n",
    "t_data = np.arange(0,time_end,sample_time)\n",
    "v_data = np.zeros_like(t_data)\n",
    "\n",
    "# throttle percentage between 0 and 1\n",
    "throttle = 1\n",
    "\n",
    "\n",
    "# incline angle (in radians)\n",
    "alpha = 0.1\n",
    "\n",
    "for i in range(t_data.shape[0]):\n",
    "    \n",
    "    v_data[i] = model.v\n",
    "    model.step(throttle, alpha)\n",
    "    \n",
    "plt.plot(t_data, v_data)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will now drive the vehicle over a slope as shown in the diagram below.\n",
    "\n",
    "![ramp](ramp.png)\n",
    "\n",
    "To climb the slope, a trapezoidal throttle input is provided for the next 20 seconds as shown in the figure below. \n",
    "\n",
    "![throttle](throttle.png)\n",
    "\n",
    "The vehicle begins at 20% throttle and gradually increases to 50% throttle. This is maintained for 10 seconds as the vehicle climbs the steeper slope. Afterwards, the vehicle reduces the throttle to 0.\n",
    "\n",
    "In the cell below, implement the ramp angle profile $\\alpha (x)$ and throttle profile $x_\\theta (t)$ and step them through the vehicle dynamics. The vehicle position $x(t)$ is saved in the array $\\textit{x_data}$. This will be used to grade your solution.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "time_end = 20\n",
    "t_data = np.arange(0,time_end,sample_time)\n",
    "x_data = np.zeros_like(t_data)\n",
    "\n",
    "\n",
    "throttle_data = np.zeros_like(t_data)\n",
    "alpha_data = np.zeros_like(t_data)\n",
    "# reset the states\n",
    "model.reset()\n",
    "\n",
    "# Creating throttle array and alpha array\n",
    "\n",
    "for i in range(t_data.shape[0]) : \n",
    "    if t_data[i] < 5.0:\n",
    "        #throttle increaese\n",
    "        alpha_data[i] = np.arctan(3/60)\n",
    "        \n",
    "        throttle_data[i] = (0.3/5)*t_data[i]  + 0.2\n",
    "        \n",
    "        \n",
    "        \n",
    "    elif t_data[i] >=5.0 and t_data[i]<15.0:\n",
    "        #constant throttle\n",
    "        alpha_data[i] = np.arctan(9/90)\n",
    "        \n",
    "        throttle_data[i] = 0.5\n",
    "        \n",
    "        \n",
    "    else:\n",
    "        #throttle decreses\n",
    "        alpha_data[i] = 0\n",
    "        \n",
    "        throttle_data[i] = (0.5/5)*(20 - t_data[i])\n",
    "        \n",
    "        \n",
    "#print(t_data)\n",
    "#print(throttle_data[1400:2000])\n",
    "#print(alpha_data[1480:2000])\n",
    "        \n",
    "for i in range(t_data.shape[0]) :\n",
    "    x_data[i] = model.x\n",
    "    \n",
    "    model.step(throttle_data[i],alpha_data[i])\n",
    "\n",
    "        \n",
    "# ==================================\n",
    "#  Learner solution ends here\n",
    "# ==================================\n",
    "\n",
    "# Plot x vs t for visualization\n",
    "plt.plot(t_data,throttle_data)\n",
    "plt.show()\n",
    "plt.plot(t_data,alpha_data)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you have implemented the vehicle model and inputs correctly, you should see that the vehicle crosses the ramp at ~15s where the throttle input begins to decrease.\n",
    "\n",
    "The cell below will save the time and vehicle inputs as text file named $\\textit{xdata.txt}$. To locate the file, change the end of your web directory to $\\textit{/notebooks/Course_1_Module_4/xdata.txt}$\n",
    "\n",
    "Once you are there, you can download the file and submit to the Coursera grader to complete this assessment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = np.vstack([t_data, x_data]).T\n",
    "np.savetxt('xdata.txt', data, delimiter=', ')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Congratulations! You have now completed the assessment! Feel free to test the vehicle model with different inputs in the cell below, and see what trajectories they form. In the next module, you will see the longitudinal model being used for speed control. See you there!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sample_time = 0.1\n",
    "time_end = 30\n",
    "model.reset()\n",
    "\n",
    "t_data = np.arange(0,time_end,sample_time)\n",
    "x_data = np.zeros_like(t_data)\n",
    "y_data = np.zeros_like(t_data)\n",
    "\n",
    "\n",
    "# ==================================\n",
    "#  Test various inputs here\n",
    "# ==================================\n",
    "for i in range(t_data.shape[0]):\n",
    "\n",
    "    model.step(0.2,0.3)\n",
    "    x_data[i] = model.x\n",
    "    y_data[i] = model.v\n",
    "    \n",
    "plt.axis('equal')\n",
    "plt.plot(t_data, y_data)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
